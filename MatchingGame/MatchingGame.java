/**
 * ICS4UR Computer Science, 12 
 * Brampton, Canada
 *
 * https://github.com/HarisK03/
 * https://repl.it/@HarisKamal
 *
 * modified     20201012
 * date         20201006
 * @filename	MatchingGame.java
 * @author      hkamal 
 * @version     1.1
 * @see         MatchingGame program Assignment 2.3 - matching game (make pairs between 2 cards, total 12 cards; Hearthstone themed)
 */

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import javax.swing.ImageIcon;
import javax.swing.Timer;

public class MatchingGame extends javax.swing.JFrame {
   
    String path = "./";
    ArrayList<String> cards = new ArrayList<String>();
    ArrayList<String> set = new ArrayList<String>();
    // https://www.cleanpng.com/png-hearthstone-world-of-warcraft-anduin-lothar-varian-7025923/
    ImageIcon a = new ImageIcon(path + "1.png");
    // https://www.cleanpng.com/png-world-of-warcraft-mists-of-pandaria-hearthstone-he-884850/
    ImageIcon b = new ImageIcon(path + "2.png");
    // https://www.pngwave.com/png-clip-art-oexcw
    ImageIcon c = new ImageIcon(path + "3.png");
    // https://www.pngwing.com/en/free-png-ipcwq
    ImageIcon d = new ImageIcon(path + "4.png");
    // https://www.pngwing.com/en/free-png-ikxaj
    ImageIcon e = new ImageIcon(path + "5.png");
    // https://www.cleanpng.com/free/murloc.html
    ImageIcon f = new ImageIcon(path + "6.png");
    // https://media-hearth.cursecdn.com/attachments/39/669/cardback_5.png
    ImageIcon back = new ImageIcon(path + "cardback.png");
    // https://www.uihere.com/free-cliparts/hearthstone-diablo-world-of-warcraft-battle-net-blizzard-entertainment-hearthstone-1928299
    ImageIcon done = new ImageIcon(path + "done.png");
    int count, c1, c2, card1, card2;
    int cardsLeft = 12;
    int[] change = new int[12];
    boolean canClick = true;
    int count1, count2, count3, count4, count5, count6, count7, count8, count9, count10, count11, count12; // inspired by Dev Patel's solution during class
    
    // delay when selecting second card; cited from https://www.youtube.com/watch?v=HR8rr73GrgY
    Timer timer = new Timer(1000, new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            matchCheck();
        }
    });
    
    /**
     * Creates new form MatchingGame
     */
    public MatchingGame() {
        initComponents();
        // autostart game
        gameStart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTitle = new javax.swing.JLabel();
        Card1 = new javax.swing.JButton();
        Card2 = new javax.swing.JButton();
        Card3 = new javax.swing.JButton();
        Card4 = new javax.swing.JButton();
        Card5 = new javax.swing.JButton();
        Card6 = new javax.swing.JButton();
        Card7 = new javax.swing.JButton();
        Card8 = new javax.swing.JButton();
        Card9 = new javax.swing.JButton();
        Card10 = new javax.swing.JButton();
        Card11 = new javax.swing.JButton();
        Card12 = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        txtInstruction = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Matching Game");

        mainTitle.setFont(new java.awt.Font("Open Sans", 1, 36)); // NOI18N
        mainTitle.setForeground(new java.awt.Color(255, 0, 0));
        mainTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainTitle.setText("Hearthstone Matching Game");

        Card1.setIcon(new javax.swing.ImageIcon(path + "cardback.png")); // NOI18N
        Card1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card1ActionPerformed(evt);
            }
        });

        Card2.setIcon(new javax.swing.ImageIcon(path + "cardback.png")); // NOI18N
        Card2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card2ActionPerformed(evt);
            }
        });

        Card3.setIcon(new javax.swing.ImageIcon(path + "cardback.png")); // NOI18N
        Card3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card3ActionPerformed(evt);
            }
        });

        Card4.setIcon(new javax.swing.ImageIcon(path + "cardback.png")); // NOI18N
        Card4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card4ActionPerformed(evt);
            }
        });

        Card5.setIcon(new javax.swing.ImageIcon(path + "cardback.png")); // NOI18N
        Card5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card5ActionPerformed(evt);
            }
        });

        Card6.setIcon(new javax.swing.ImageIcon(path + "cardback.png")); // NOI18N
        Card6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card6ActionPerformed(evt);
            }
        });

        Card7.setIcon(new javax.swing.ImageIcon(path + "cardback.png")); // NOI18N
        Card7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card7ActionPerformed(evt);
            }
        });

        Card8.setIcon(new javax.swing.ImageIcon(path + "cardback.png")); // NOI18N
        Card8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card8ActionPerformed(evt);
            }
        });

        Card9.setIcon(new javax.swing.ImageIcon(path + "cardback.png")); // NOI18N
        Card9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card9ActionPerformed(evt);
            }
        });

        Card10.setIcon(new javax.swing.ImageIcon(path + "cardback.png")); // NOI18N
        Card10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card10ActionPerformed(evt);
            }
        });

        Card11.setIcon(new javax.swing.ImageIcon(path + "cardback.png")); // NOI18N
        Card11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card11ActionPerformed(evt);
            }
        });

        Card12.setIcon(new javax.swing.ImageIcon(path + "cardback.png")); // NOI18N
        Card12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card12ActionPerformed(evt);
            }
        });

        btnPlay.setText("Reset");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        txtInstruction.setEditable(false);
        txtInstruction.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtInstruction.setText("Match card pairs to win!");
        txtInstruction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInstructionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 290, Short.MAX_VALUE)
                .addComponent(btnPlay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExit)
                .addGap(266, 266, 266))
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Card5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Card1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Card2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Card6, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Card3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Card7, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(Card9, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Card10, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Card11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Card12, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(Card4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Card8, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtInstruction, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(246, 246, 246))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(Card4, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Card2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Card1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Card3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Card8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Card5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Card6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Card7, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Card12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Card9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Card10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Card11, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPlay)
                    .addComponent(btnExit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtInstruction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // exit
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed
    
    // reset game and instructions
    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        gameStart();
        txtInstruction.setText("Match card pairs to win!");
    }//GEN-LAST:event_btnPlayActionPerformed

    // reset the game by clearing arrays and setting icons to cardback
    private void gameStart() {
        if (count == 1) {
            return;
        }
        
        cardsLeft = 12;
        cards.clear();
        set.clear();
        
        Card1.setIcon(back);
        Card2.setIcon(back);
        Card3.setIcon(back);
        Card4.setIcon(back);
        Card5.setIcon(back);
        Card6.setIcon(back);
        Card7.setIcon(back);
        Card8.setIcon(back);
        Card9.setIcon(back);
        Card10.setIcon(back);
        Card11.setIcon(back);
        Card12.setIcon(back);
        
        /** Set change array */
        for (int z = 0; z <= 11; z++) {
            change[z] = 1;
        }
        
        /** Assign cards at random */
        String temp;
        for (int x = 0; x <= 5; x++) {
            for (int y = 1; y <= 2; y++) {
                temp = Integer.toString(x);
                set.add(temp);
            }
        }
        
        for (int x=0; x <= 11; x++) {
            double index = Math.floor(Math.random()*(12-x));
            int index1 = (int)index;
            cards.add(set.get(index1));
            set.remove(set.get(index1));
        }
    }
    
    // card click
    private void Card1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card1ActionPerformed
        if (count1 == 1) {
            return;
        }
        
        String temp = cards.get(0);
        if ((!canClick) || (Card1.getIcon() == done)) {
            return;
        }
        
        if (temp.equals("0")) {
            Card1.setIcon(a);
        } else if (temp.equals("1")) {
            Card1.setIcon(b);
        } else if (temp.equals("2")) {
            Card1.setIcon(c);
        } else if (temp.equals("3")) {
            Card1.setIcon(d);
        } else if (temp.equals("4")) {
            Card1.setIcon(e);
        } else if (temp.equals("5")) {
            Card1.setIcon(f);
        }
        
        count++;
        count1++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[0] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[0] = 0;
            timer.start();
            canClick = false;
        }
    }//GEN-LAST:event_Card1ActionPerformed

    // card click
    private void Card2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card2ActionPerformed
        if (count2 == 1) {
            return;
        }
        
        String temp = cards.get(1);
        if ((!canClick) || (Card2.getIcon() == done)) {
            return;
        }
        
        if (temp.equals("0")) {
            Card2.setIcon(a);
        } else if (temp.equals("1")) {
            Card2.setIcon(b);
        } else if (temp.equals("2")) {
            Card2.setIcon(c);
        } else if (temp.equals("3")) {
            Card2.setIcon(d);
        } else if (temp.equals("4")) {
            Card2.setIcon(e);
        } else if (temp.equals("5")) {
            Card2.setIcon(f);
        }
        
        count++;
        count2++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[1] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[1] = 0;
            timer.start();
            canClick = false;
        }
    }//GEN-LAST:event_Card2ActionPerformed
    
    // card click
    private void Card3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card3ActionPerformed
        if (count3 == 1) {
            return;
        }
        
        String temp = cards.get(2);
        if ((!canClick) || (Card3.getIcon() == done)) {
            return;
        }
        
        if (temp.equals("0")) {
            Card3.setIcon(a);
        } else if (temp.equals("1")) {
            Card3.setIcon(b);
        } else if (temp.equals("2")) {
            Card3.setIcon(c);
        } else if (temp.equals("3")) {
            Card3.setIcon(d);
        } else if (temp.equals("4")) {
            Card3.setIcon(e);
        } else if (temp.equals("5")) {
            Card3.setIcon(f);
        }
        
        count++;
        count3++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[2] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[2] = 0;
            timer.start();
            canClick = false;
        }
    }//GEN-LAST:event_Card3ActionPerformed

    // card click
    private void Card5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card5ActionPerformed
        if (count5 == 1) {
            return;
        }
        
        String temp = cards.get(4);
        if ((!canClick) || (Card5.getIcon() == done)) {
            return;
        }
        
        if (temp.equals("0")) {
            Card5.setIcon(a);
        } else if (temp.equals("1")) {
            Card5.setIcon(b);
        } else if (temp.equals("2")) {
            Card5.setIcon(c);
        } else if (temp.equals("3")) {
            Card5.setIcon(d);
        } else if (temp.equals("4")) {
            Card5.setIcon(e);
        } else if (temp.equals("5")) {
            Card5.setIcon(f);
        }
        
        count++;
        count5++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[4] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[4] = 0;
            timer.start();
            canClick = false;
        }
        
    }//GEN-LAST:event_Card5ActionPerformed

    // card click
    private void Card4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card4ActionPerformed
        if (count4 == 1) {
            return;
        }
        
        String temp = cards.get(3);
        if ((!canClick) || (Card4.getIcon() == done)) {
            return;
        }
        
        if (temp.equals("0")) {
            Card4.setIcon(a);
        } else if (temp.equals("1")) {
            Card4.setIcon(b);
        } else if (temp.equals("2")) {
            Card4.setIcon(c);
        } else if (temp.equals("3")) {
            Card4.setIcon(d);
        } else if (temp.equals("4")) {
            Card4.setIcon(e);
        } else if (temp.equals("5")) {
            Card4.setIcon(f);
        }
        
        count++;
        count4++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[3] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[3] = 0;
            timer.start();
            canClick = false;
        }
    }//GEN-LAST:event_Card4ActionPerformed

    // card click
    private void Card6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card6ActionPerformed
        if (count6 == 1) {
            return;
        }
        
        String temp = cards.get(5);
        if ((!canClick) || (Card6.getIcon() == done)) {
            return;
        }
        
        if (temp.equals("0")) {
            Card6.setIcon(a);
        } else if (temp.equals("1")) {
            Card6.setIcon(b);
        } else if (temp.equals("2")) {
            Card6.setIcon(c);
        } else if (temp.equals("3")) {
            Card6.setIcon(d);
        } else if (temp.equals("4")) {
            Card6.setIcon(e);
        } else if (temp.equals("5")) {
            Card6.setIcon(f);
        }
        
        count++;
        count6++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[5] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[5] = 0;
            timer.start();
            canClick = false;
        }
    }//GEN-LAST:event_Card6ActionPerformed

    // card click
    private void Card7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card7ActionPerformed
        if (count7 == 1) {
            return;
        }
        
        String temp = cards.get(6);
        if ((!canClick) || (Card7.getIcon() == done)) {
            return;
        }
        
        if (temp.equals("0")) {
            Card7.setIcon(a);
        } else if (temp.equals("1")) {
            Card7.setIcon(b);
        } else if (temp.equals("2")) {
            Card7.setIcon(c);
        } else if (temp.equals("3")) {
            Card7.setIcon(d);
        } else if (temp.equals("4")) {
            Card7.setIcon(e);
        } else if (temp.equals("5")) {
            Card7.setIcon(f);
        } 
        
        count++;
        count7++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[6] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[6] = 0;
            timer.start();
            canClick = false;
        }
    }//GEN-LAST:event_Card7ActionPerformed

    // card click
    private void Card8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card8ActionPerformed
        if (count8 == 1) {
            return;
        }
        
        String temp = cards.get(7);
        if ((!canClick) || (Card8.getIcon() == done)) {
            return;
        }
        
        if (temp.equals("0")) {
            Card8.setIcon(a);
        } else if (temp.equals("1")) {
            Card8.setIcon(b);
        } else if (temp.equals("2")) {
            Card8.setIcon(c);
        } else if (temp.equals("3")) {
            Card8.setIcon(d);
        } else if (temp.equals("4")) {
            Card8.setIcon(e);
        } else if (temp.equals("5")) {
            Card8.setIcon(f);
        }
        
        count++;
        count8++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[7] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[7] = 0;
            timer.start();
            canClick = false;
        }
    }//GEN-LAST:event_Card8ActionPerformed

    // card click
    private void Card9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card9ActionPerformed
        if (count9 == 1) {
            return;
        }
        
        String temp = cards.get(8);
        if ((!canClick) || (Card9.getIcon() == done)) {
            return;
        }
        
        if (temp.equals("0")) {
            Card9.setIcon(a);
        } else if (temp.equals("1")) {
            Card9.setIcon(b);
        } else if (temp.equals("2")) {
            Card9.setIcon(c);
        } else if (temp.equals("3")) {
            Card9.setIcon(d);
        } else if (temp.equals("4")) {
            Card9.setIcon(e);
        } else if (temp.equals("5")) {
            Card9.setIcon(f);
        }
        
        count++;
        count9++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[8] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[8] = 0;
            timer.start();
            canClick = false;
        }
    }//GEN-LAST:event_Card9ActionPerformed

    // card click
    private void Card10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card10ActionPerformed
        if (count10 == 1) {
            return;
        }
        
        String temp = cards.get(9);
        if ((!canClick) || (Card10.getIcon() == done)) {
            return;
        }
        
        if (temp.equals("0")) {
            Card10.setIcon(a);
        } else if (temp.equals("1")) {
            Card10.setIcon(b);
        } else if (temp.equals("2")) {
            Card10.setIcon(c);
        } else if (temp.equals("3")) {
            Card10.setIcon(d);
        } else if (temp.equals("4")) {
            Card10.setIcon(e);
        } else if (temp.equals("5")) {
            Card10.setIcon(f);
        }
        
        count++;
        count10++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[9] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[9] = 0;
            timer.start();
            canClick = false;
        }
    }//GEN-LAST:event_Card10ActionPerformed

    // card click
    private void Card11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card11ActionPerformed
        if (count11 == 1) {
            return;
        }
        
        String temp = cards.get(10);
        if ((!canClick) || (Card11.getIcon() == done)) {
            return;
        }
        
        if (temp.equals("0")) {
            Card11.setIcon(a);
        } else if (temp.equals("1")) {
            Card11.setIcon(b);
        } else if (temp.equals("2")) {
            Card11.setIcon(c);
        } else if (temp.equals("3")) {
            Card11.setIcon(d);
        } else if (temp.equals("4")) {
            Card11.setIcon(e);
        } else if (temp.equals("5")) {
            Card11.setIcon(f);
        }
        
        count++;
        count11++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[10] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[10] = 0;
            timer.start();
            canClick = false;
        }
    }//GEN-LAST:event_Card11ActionPerformed

    // card click
    private void Card12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card12ActionPerformed
        if (count12 == 1) {
            return;
        }
        
        String temp = cards.get(11);
        if ((!canClick) || (Card12.getIcon() == done)) {
            return;
        }
        
        if (temp.equals("0")) {
            Card12.setIcon(a);
        } else if (temp.equals("1")) {
            Card12.setIcon(b);
        } else if (temp.equals("2")) {
            Card12.setIcon(c);
        } else if (temp.equals("3")) {
            Card12.setIcon(d);
        } else if (temp.equals("4")) {
            Card12.setIcon(e);
        } else if (temp.equals("5")) {
            Card12.setIcon(f);
        }
        
        count++;
        count12++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[11] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[11] = 0;
            timer.start();
            canClick = false;
        }
    }//GEN-LAST:event_Card12ActionPerformed

    private void txtInstructionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInstructionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInstructionActionPerformed
    
    // checks the 2 cards that have been clicked
    private void matchCheck() {
        count = 0;
        count1 = 0; count2 = 0; count3 = 0; count4 = 0; count5 = 0; count6 = 0; count7 = 0; count8 = 0; count9 = 0; count10 = 0; count11 = 0; count12 = 0;
        
        // checks if the card is the same
        if (c1 == c2) {
            cardsLeft -= 2;
            for (int y = 1; y <= 2; y++) {
                if (change[0] == 0) {
                    Card1.setIcon(done);
                    change[0] = 2;
                } else if (change[1] == 0) {
                    Card2.setIcon(done);
                    change[1] = 2;
                } else if (change[2] == 0) {
                    Card3.setIcon(done);
                    change[2] = 2;
                } else if (change[3] == 0) {
                    Card4.setIcon(done);
                    change[3] = 2;
                } else if (change[4] == 0) {
                    Card5.setIcon(done);
                    change[4] = 2;
                } else if (change[5] == 0) {
                    Card6.setIcon(done);
                    change[5] = 2;
                } else if (change[6] == 0) {
                    Card7.setIcon(done);
                    change[6] = 2;
                } else if (change[7] == 0) {
                    Card8.setIcon(done);
                    change[7] = 2;
                } else if (change[8] == 0) {
                    Card9.setIcon(done);
                    change[8] = 2;
                } else if (change[9] == 0) {
                    Card10.setIcon(done);
                    change[9] = 2;
                } else if (change[10] == 0) {
                    Card11.setIcon(done);
                    change[10] = 2;
                } else if (change[11] == 0) {
                    Card12.setIcon(done);
                    change[11] = 2;
                } 
            }
        }
        else {
            for (int z = 1; z <= 2; z++) {

                if (change[0] == 0) {
                    Card1.setIcon(back);
                    change[0] = 1;
                } else if (change[1] == 0) {
                    Card2.setIcon(back);
                    change[1] = 1;
                } else if (change[2] == 0) {
                    Card3.setIcon(back);
                    change[2] = 1;
                } else if (change[3] == 0) {
                    Card4.setIcon(back);
                    change[3] = 1;
                } else if (change[4] == 0) {
                    Card5.setIcon(back);
                    change[4] = 1;
                } else if (change[5] == 0) {
                    Card6.setIcon(back);
                    change[5] = 1;
                } else if (change[6] == 0) {
                    Card7.setIcon(back);
                    change[6] = 1;
                } else if (change[7] == 0) {
                    Card8.setIcon(back);
                    change[7] = 1;
                } else if (change[8] == 0) {
                    Card9.setIcon(back);
                    change[8] = 1;
                } else if (change[9] == 0) {
                    Card10.setIcon(back);
                    change[9] = 1;
                } else if (change[10] == 0) {
                    Card11.setIcon(back);
                    change[10] = 1;
                } else if (change[11] == 0) {
                    Card12.setIcon(back);
                    change[11] = 1;
                }                                              
            }
        }
        timer.stop();
        canClick = true;
        if (cardsLeft == 0) {
            txtInstruction.setText("Congratulations!");
        }
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MatchingGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Card1;
    private javax.swing.JButton Card10;
    private javax.swing.JButton Card11;
    private javax.swing.JButton Card12;
    private javax.swing.JButton Card2;
    private javax.swing.JButton Card3;
    private javax.swing.JButton Card4;
    private javax.swing.JButton Card5;
    private javax.swing.JButton Card6;
    private javax.swing.JButton Card7;
    private javax.swing.JButton Card8;
    private javax.swing.JButton Card9;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnPlay;
    private javax.swing.JLabel mainTitle;
    private javax.swing.JTextField txtInstruction;
    // End of variables declaration//GEN-END:variables
}
