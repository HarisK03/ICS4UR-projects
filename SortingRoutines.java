/**
 * ICS4UR Computer Science, 12 
 * Brampton, Canada
 *
 * https://github.com/HarisK03/
 * https://repl.it/@HarisKamal
 *
 * modified     20201024
 * date         20201023
 * @filename	SortingRoutines.java
 * @author      hkamal
 * @version     1.0
 * @see         SortingRoutines program Assignment 3.4.1 - 4 different sorting 
 */

import java.util.*;
import javax.swing.JOptionPane;

public class SortingRoutines extends javax.swing.JFrame {

    /**
     * Creates new form SortingRoutines
     */
    public SortingRoutines() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        algorithm = new javax.swing.ButtonGroup();
        order = new javax.swing.ButtonGroup();
        lblSortT = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblHeader = new javax.swing.JLabel();
        lblOrderT = new javax.swing.JLabel();
        lblAmount = new javax.swing.JLabel();
        btnSort = new javax.swing.JButton();
        lblOriginal = new javax.swing.JLabel();
        lblSorted = new javax.swing.JLabel();
        radioSelection = new javax.swing.JRadioButton();
        radioBubble = new javax.swing.JRadioButton();
        radioInsertion = new javax.swing.JRadioButton();
        radioQuick = new javax.swing.JRadioButton();
        radioAscending = new javax.swing.JRadioButton();
        radioDescending = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        display1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        display2 = new javax.swing.JTextArea();
        btnExit = new javax.swing.JButton();
        numIn = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblSortT.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblSortT.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSortT.setText("Sorting Algorithm");

        lblTitle.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Sorting Routines");

        lblHeader.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lblHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeader.setText("Enter the following information:");

        lblOrderT.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblOrderT.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblOrderT.setText("Sort Order");

        lblAmount.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lblAmount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAmount.setText("Amount of Numbers to Sort:");

        btnSort.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnSort.setText("Sort Numbers");
        btnSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortActionPerformed(evt);
            }
        });

        lblOriginal.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblOriginal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblOriginal.setText("Original Numbers");

        lblSorted.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblSorted.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSorted.setText("Sorted Numbers");

        algorithm.add(radioSelection);
        radioSelection.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        radioSelection.setText("Selection");

        algorithm.add(radioBubble);
        radioBubble.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        radioBubble.setText("Bubble");

        algorithm.add(radioInsertion);
        radioInsertion.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        radioInsertion.setText("Insertion");

        algorithm.add(radioQuick);
        radioQuick.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        radioQuick.setText("Quick");

        order.add(radioAscending);
        radioAscending.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        radioAscending.setText("Ascending");

        order.add(radioDescending);
        radioDescending.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        radioDescending.setText("Descending");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        display1.setEditable(false);
        display1.setColumns(20);
        display1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        display1.setRows(5);
        jScrollPane1.setViewportView(display1);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        display2.setEditable(false);
        display2.setColumns(20);
        display2.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        display2.setRows(5);
        display2.setMaximumSize(new java.awt.Dimension(224, 84));
        display2.setMinimumSize(new java.awt.Dimension(5, 10));
        jScrollPane2.setViewportView(display2);

        btnExit.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        numIn.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(lblOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSort, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(lblSorted)))
                .addGap(48, 48, 48))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioQuick)
                            .addComponent(radioSelection)
                            .addComponent(radioInsertion)
                            .addComponent(radioBubble)
                            .addComponent(lblSortT))
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(radioAscending)
                                .addComponent(radioDescending))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblOrderT)
                                .addGap(29, 29, 29)))
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblAmount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(numIn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(215, 215, 215))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(lblHeader)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSortT)
                    .addComponent(lblOrderT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(radioSelection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(radioBubble))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(radioAscending)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(radioDescending)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioInsertion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioQuick)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAmount)
                    .addComponent(numIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSorted)
                            .addComponent(lblOriginal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(42, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExit)
                        .addGap(92, 92, 92))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(21, 21, 21)
                    .addComponent(lblTitle)
                    .addContainerGap(472, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    ArrayList<Integer> nums = new ArrayList<Integer>();
    
    private void btnSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortActionPerformed
        try {
            if (!(radioAscending.isSelected() || radioDescending.isSelected())) {
                JOptionPane.showMessageDialog(null, "Ascending or Descending?");
                return;
            }
            
            if (Integer.parseInt(numIn.getText()) <= 0) {
                JOptionPane.showMessageDialog(null, "Number can not be negative!");
                return;
            }
            
            nums.clear();
            randNums();
            display1.setText("");
            display2.setText("");
            
            if (radioSelection.isSelected()) {
                selection();
            }
            else if (radioBubble.isSelected()) {
                bubble();
            }
            else if (radioInsertion.isSelected()) {
                insertion();
            }
            else if (radioQuick.isSelected()) {
                quick();
            }
            else {
                JOptionPane.showMessageDialog(null, "Which sorting algorithm?");
                return;
            }
        }
        catch (Exception e) {JOptionPane.showMessageDialog(null, "Please input a number!");}
    }//GEN-LAST:event_btnSortActionPerformed

    // exit
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed
    
    // selection sort 
    private void selection() {
        for (int a = 0; a < nums.size(); a++) {
            display1.append(nums.get(a).toString() + "\n");
        }
        // src: https://www.youtube.com/watch?v=cqh8nQwuKNE
        if (radioAscending.isSelected()) {
            for (int i = 0; i < nums.size(); i++) {
                int minI = i;
                for (int j = i+1; j < nums.size(); j++) {
                    if (nums.get(j) < nums.get(minI)) {
                        minI = j;
                    }
                }
                int temp = nums.get(minI);
                nums.set(minI, nums.get(i)); 
                nums.set(i, temp);
            }
        }
        else {
            for (int i = 0; i < nums.size(); i++) {
                int minI = i;
                for (int j = i+1; j < nums.size(); j++) {
                    if (nums.get(j) > nums.get(minI)) {
                        minI = j;
                    }
                }
                int temp = nums.get(minI);
                nums.set(minI, nums.get(i)); 
                nums.set(i, temp);
            }
        }
        for (int b = 0; b < nums.size(); b++) {
            display2.append(nums.get(b).toString() + "\n");
        }
    }
    
    // bubble sort
    private void bubble() {
        for (int a = 0; a < nums.size(); a++) {
            display1.append(nums.get(a).toString() + "\n");
        }
        // src: https://www.youtube.com/watch?v=6Gv8vg0kcHc
        if (radioAscending.isSelected()) {
            boolean isSorted = false;
            while (!isSorted) {
                isSorted = true;
                for (int i = 0; i < nums.size() - 1; i++) {
                    if (nums.get(i) > nums.get(i + 1)) {
                        Collections.swap(nums, i, i + 1);
                        isSorted = false;
                    }
                }
            }
        }
        else {
            boolean isSorted = false;
            while (!isSorted) {
                isSorted = true;
                for (int i = 0; i < nums.size() - 1; i++) {
                    if (nums.get(i) < nums.get(i + 1)) {
                        Collections.swap(nums, i, i + 1);
                        isSorted = false;
                    }
                }
            }
        }
        for (int b = 0; b < nums.size(); b++) {
            display2.append(nums.get(b).toString() + "\n");
        }
    }
    
    // insertion sort
    private void insertion() {
        for (int a = 0; a < nums.size(); a++) {
            display1.append(nums.get(a).toString() + "\n");
        }
        // src: https://www.geeksforgeeks.org/insertion-sort/
        if (radioAscending.isSelected()) {
            for (int i = 0; i < nums.size(); i++) {
                int target = nums.get(i); 
                int j = i - 1;

                while (j >= 0 && nums.get(j) > target) {
                    nums.set(j + 1, nums.get(j));
                    j = j - 1;
                }
                nums.set(j + 1, target); 
            }
        }
        else {
            for (int i = 0; i < nums.size(); i++) {
                int target = nums.get(i); 
                int j = i - 1;

                while (j >= 0 && nums.get(j) < target) {
                    nums.set(j + 1, nums.get(j));
                    j = j - 1;
                }
                nums.set(j + 1, target); 
            }
        }
        for (int b = 0; b < nums.size(); b++) {
            display2.append(nums.get(b).toString() + "\n");
        }
    }
    
    // quick sort
    private void quick() {        
        for (int a = 0; a < nums.size(); a++) {
            display1.append(nums.get(a).toString() + "\n");
        }
           
        quickSort(nums, 0, nums.size()-1);
        
        for (int b = 0; b < nums.size(); b++) {
            display2.append(nums.get(b).toString() + "\n");
        }
    }
    
    // src: https://www.softwaretestinghelp.com/quicksort-in-java/
    private void quickSort(ArrayList<Integer> nums, int low, int high) {
        if (low < high) {
            int pi = partition(nums, low, high);
            quickSort(nums, low, pi-1);
            quickSort(nums, pi+1, high);
        }
    }
    
    private int partition(ArrayList<Integer> nums, int low, int high) {
        if (radioAscending.isSelected()) {
            int pi = nums.get(high);
            int i = (low-1);  
            for (int j = low; j < high; j++) { 
                if (nums.get(j) <= pi) { 
                    i++; 
                    int temp = nums.get(i); 
                    nums.set(i, nums.get(j)); 
                    nums.set(j, temp); 
                } 
            } 
            int temp = nums.get(i+1); 
            nums.set(i+1, nums.get(high));
            nums.set(high, temp);
            return i+1; 
        }
        else {
            int pi = nums.get(high);
            int i = (low-1);  
            for (int j = low; j < high; j++) { 
                if (nums.get(j) >= pi) { 
                    i++; 
                    int temp = nums.get(i); 
                    nums.set(i, nums.get(j)); 
                    nums.set(j, temp); 
                } 
            } 
            int temp = nums.get(i+1); 
            nums.set(i+1, nums.get(high));
            nums.set(high, temp);
            return i+1; 
        }
    }
    
    private void randNums() {
        int min = -1000;
        int max = 1000;
        for (int i = 0; i < Integer.parseInt(numIn.getText()); i++) {
            nums.add((int)((Math.random()*(max - min))+min)); // src: https://www.baeldung.com/java-generating-random-numbers-in-range
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SortingRoutines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SortingRoutines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SortingRoutines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SortingRoutines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SortingRoutines().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup algorithm;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSort;
    private javax.swing.JTextArea display1;
    private javax.swing.JTextArea display2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAmount;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblOrderT;
    private javax.swing.JLabel lblOriginal;
    private javax.swing.JLabel lblSortT;
    private javax.swing.JLabel lblSorted;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField numIn;
    private javax.swing.ButtonGroup order;
    private javax.swing.JRadioButton radioAscending;
    private javax.swing.JRadioButton radioBubble;
    private javax.swing.JRadioButton radioDescending;
    private javax.swing.JRadioButton radioInsertion;
    private javax.swing.JRadioButton radioQuick;
    private javax.swing.JRadioButton radioSelection;
    // End of variables declaration//GEN-END:variables
}
